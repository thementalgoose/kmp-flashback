name: Job - iOS - Assemble Prod IPA

on:
#  workflow_dispatch:
#    inputs:
#      version_name:
#        type: string
#        description: "Version name (1.0.0)"
#        default: "1.0.0"
  workflow_call:
    inputs:
      version_name: { required: true, type: string }
    outputs:
      artifact-name:
        value: ${{ jobs.build.outputs.artifact-name }}

jobs:
  build:
    runs-on: macos-15
    timeout-minutes: 40
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/iosApp/Gemfile
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Xcode setup
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Setup ruby & Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Setup Cocoapods
        uses: maxim-lobanov/setup-cocoapods@v1
        with:
          podfile-path: iosApp/Podfile.lock

      - name: Install bundler
        run: gem install bundler

      - name: Install fastlane dependencies
        run: cd iosApp/ && bundle install

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/*.toml*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Generate dummy framework
        run: |
          ./gradlew :composeApp:generateDummyFramework

      # Compile some tasks ahead of time
      - name: Compile
        run: |
          ./gradlew :composeApp:compileKotlinIosArm64 

      - name: clean pod cache
        run: |
          cd iosApp
          pod install

      - name: Environment variables
        env:
          GOOGLE_SERVICES_JSON_PRODUCTION: ${{ secrets.GOOGLE_SERVICES_JSON_PRODUCTION }}
          GOOGLE_SERVICES_PLIST_PRODUCTION: ${{ secrets.GOOGLE_SERVICES_PLIST_PRODUCTION }}
        run: |
          mkdir -p composeApp/src/sandbox
          mkdir -p composeApp/src/production
          mkdir -p iosApp/iosApp/Firebase
          echo GOOGLE_SERVICES_JSON_PRODUCTION | base64 --decode >> composeApp/src/production/google-services.json
          echo $GOOGLE_SERVICES_PLIST_PRODUCTION | base64 --decode >> iosApp/iosApp/Firebase/GoogleService-production.plist

      - name: Create .env file
        run: |
          echo "${{ secrets.IOS_FASTLANE_ENV_FILE }}" > iosApp/fastlane/.env.default

      - name: Build and Deploy to TestFlight
        env:
          VERSION_NAME: ${{ inputs.version_name }}
        run: |
          cd ./iosApp
          bundle exec fastlane build_upload_testflight

      - name: Upload file to github tag
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            **/Flashback.ipa
            **/Flashback.app.dSYM.zip